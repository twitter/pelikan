## Choice of Language
Unlike many high(er) level languages, people seem to prefer testing their C projects with code written in other languages- Perl (Memcached, Apache HTTP Server), Tcl (Redis, gcc/DejaGnu) are popular choices; I rewrote tests in Twemcache in Python for better readability. There are also projects that write tests in C++ to use Google Test and other C++ test framework. However, when it comes to load testing with stringent performance requirements, and/or testing of internal modules, invariably developers fall back to C, as seen in Twemperf and Flood. nginx and apache server also use C tests at least partially.

In the end, the difficulty of providing clean abstraction in C is outweighed by the capability of direct access to function APIs, efficiency of execution and portability. ccommon's test suite will be (mostly) written in C, with the possibility of testing high-level inter-process interfaces tested in some other languages.

## Choice of Framework
There are quite a few candidates for the C unit test framework (http://en.wikipedia.org/wiki/List_of_unit_testing_frameworks). They range from a single drop-in header of a little more than 200 lines of code (MinUnit) to full fledged suite that comes with a UI, ability to mock and high degree of automation (Google Test). The desire to maintain high test portability rules out C++ suites (Boost, Google Test etc). Within the C frameworks, there are two criteria we adopt: 1. license compatibility requirement by Twitter; 2. features. Since we want to release the project under Apache Licence 2.0, the first criteria rules out commercial licenses and GPL licenses. Of all the remainding frameworks, Check (http://check.sourceforge.net/) offers the best feature set, and is hence chosen.

Of all the features Check provide, the separation of address space between different unit tests by using `fork()' is noteworthy. It also works on many major platforms (Linux/OSX/Win), while still being reasonable in size.
