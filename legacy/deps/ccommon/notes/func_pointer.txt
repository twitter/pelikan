twemproxy uses function pointers for callback quite extensively. One drawback of this approach is that it is fairly hard to trace through the code and find out how a particular type of agent behaves- e.g. a client-side connection may have a different recv callback than a server-side connection, but since this binding is done via function pointers, aka
dynamic binding, reading the code on the read/write path doesn't make it obvious what functions are called. These bindings instead are created when connections are created, which happens somewhere else.

Thus, the use of dynamic binding through function pointers is not without downside. It is very convenient, but one may wonder if it is necessary when the binding is never changed during the lifetime of an object, and a large group of objects (all client-side connections) share the same binding.

An alternative will be to create different callback entry functions when we register the fd up for events. So instead of having a generic event callback, let's call it event_cb, we can have one for each type of behavior, such as event_client_cb and event_server_cb. Since these callbacks are just functions, they can call the other functions directly. So within our codebase, the only callback binding happens within event loop, which is inevitable. Everything from there is easily trackable by just following the code/symbol. This approach also saves a few pointers, but that's not the main point. If there's customization needed, such customization will result in different callback functions to be constructed for the event loop.

The second approach seems to work better when individual agents don't need to behave very differently from each other, and there are only a few types of these agents around. I think this ends up being the dominant case- that a service only need to support a few types of behavior depending on whether a channel is server or client, and the stream type (a combination of buffer and channel).
