The current decision for passing and setting config options invovle a few things:
- how options are being loaded;
- the format of options;
- how options are internally stored.


In general, the two common ways of laoding options are 1) via command line; 2) via a config file or config files. We decide to uset the second out of a couple of considerations. First, when there are more than a handful of options, setting them on the command line becomes very tedious and hard to read; second, we want to allow dynamic config reloading, and this is incompatible with command line options, and introduces inconsistent values between command line and internal setting at best. Nonetheless, we will load the config file via a command line option for the filename. So we probably will have two commandline options: -f, -h.

The option format needs to balance a few things: expressiveness, human readability, and parsing complexity. I've researched a few existing ones: JSON, YAML, Java's simple Option class, space delimitered options used by Redis... Looking at the needs of Twemcache and Redis when it comes to options, it seems the simple key value design may not be enough, but we don't need to go much farther than that, either. Given that, my recommendation is to choose a subset of YAML as our config format, and write very simple parsers for it. This allows our options to be read by any parser than can parse some version of YAML, so if in the future we want to add a dependency on a full-fledged YAML library, no change needs to be made to the config files we already have.
The subset of features I think will be useful are:
1) inlined format of list: [a, b, c]
2) associative array: key: value
3) data types: integer, float, boolean, string
4) comment: '#' for comments
undecided:
1) document start separator: '---'
additional assumption (these should be relaxed later):
1) one line per option, do not support options spanning multiple lines initially
2) '#' has to be at the beginning of a line to simplify parsing
3) no whitespace before option name

Storing options is a non-issue if we don't want to allow option reload. We should start with that. The problem with reloading is atomicity and the extra read overhead to enforce that integrity of data.
