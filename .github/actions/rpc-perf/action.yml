name: 'Run rpc-perf'
description: 'Builds, configures, and runs rpc-perf'
inputs:
  port:
    description: 'Port number for endpoint'
    required: true
    default: '12321'
  protocol:
    description: 'Name of the protocol'
    required: true
    default: 'memcache'
  threads:
    description: 'Number of client threads'
    required: false
    default: 1
  poolsize:
    description: 'Number of connections per client'
    required: false
    default: 20
  ratelimit:
    description: 'Request ratelimit (qps)'
    required: false
    default: 10000
  tls:
    description: 'Enable TLS connections to endpoint'
    required: false
    default: false
runs:
  using: "composite"
  steps:
    - name: Checkout rpc-perf
      uses: actions/checkout@v2
      with:
        repository: twitter/rpc-perf
        path: rpc-perf
    - name: Build Cache for rpc-perf
      uses: Swatinem/rust-cache@v1
      with:
        key: rpc-perf
        working-directory: rpc-perf
    - name: Build rpc-perf
      run: cd rpc-perf && cargo build --release
      shell: bash
    - name: Configure
      run: |
        echo "[general]" >> client.toml
        echo "protocol = \"${{ inputs.protocol }}\"" >> client.toml
        echo "threads = ${{ inputs.threads }}" >> client.toml
        echo "[target]" >> client.toml
        echo "endpoints = [ \"127.0.0.1:${{ inputs.port }}\" ]" >> client.toml
        echo "[connection]" >> client.toml
        echo "poolsize = ${{ inputs.poolsize }}" >> client.toml
        echo "[request]" >> client.toml
        echo "ratelimit = ${{ inputs.ratelimit }}" >> client.toml
      shell: bash
    - name: Configure workload
      run: |
        echo "[[keyspace]]" >> client.toml
        if [ ${{ inputs.protocol }} == "memcache" ]; then
        echo "commands = [ { verb = \"get\", weight = 8 }, { verb = \"set\", weight = 2 } ]" >> client.toml
        echo "length = 3" >> client.toml
        echo "values = [ { length = 16 } ]" >> client.toml
        elif [ ${{ inputs.protocol }} == "ping" ]; then
        echo "commands = [ { verb = \"ping\", weight = 1 } ]" >> client.toml
        fi
      shell: bash
    - name: Configure TLS
      run: |
          if ${{ inputs.tls }}; then
          step ca certificate --san=127.0.0.1 --ca-url=127.0.0.1:443 --provisioner-password-file=${HOME}/.step/password localhost client.crt client.key
          echo "[tls]" >> client.toml
          echo "verify = false" >> client.toml
          echo "certificate_chain = \"root.crt\"" >> client.toml
          echo "certificate = \"client.crt\"" >> client.toml
          echo "private_key = \"client.key\"" >> client.toml
          fi
      shell: bash
    - name: Run rpc-perf
      run: rpc-perf/target/release/rpc-perf client.toml
      shell: bash
